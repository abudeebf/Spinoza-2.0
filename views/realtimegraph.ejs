<!DOCTYPE html> 
<html>
<head>
<meta charset="utf-8">
<link rel="stylesheet" href="doc/doc_brython.css">
<link rel="stylesheet" href="/stylesheets/style.css"/>

<link rel="stylesheet" href="console.css">
<link href='/bootstrap-3.0.0/dist/css/bootstrap.css', rel='stylesheet'>
<link href='/bootstrap-3.0.0/examples/starter-template/starter-template.css', rel='stylesheet'>
<script src='/bootstrap-3.0.0/assets/js/html5shiv.js'></script>
<link href = "https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css"rel = "stylesheet">
<script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
<script src = "https://code.jquery.com/ui/1.10.4/jquery-ui.js"></script>

<script src="/javascripts/bootstrap.js"></script>
<script src="/javascripts/bootstrap.min.js"></script>

<script src="ace/ace.js" type="text/javascript" charset="utf-8"></script>
<script src="ace/ext-language_tools.js" type="text/javascript" charset="utf-8"></script>
<script src="ace/mode-python3.js" type="text/javascript" charset="utf-8"></script>
<script src="ace/snippets/python.js" type="text/javascript" charset="utf-8"></script>
<script type="text/javascript" src="/javascripts/vis.js"></script>
<link rel="stylesheet" href="/stylesheets/vis.css"/>
<link rel="stylesheet" href="/stylesheets/vis-network.min.css"/>
<script src="/javascripts/main.js"></script>
<script type="text/javascript" src="src/brython_builtins.js"></script>
<script type="text/javascript" src="src/version_info.js"></script>
<script type="text/javascript" src="src/py2js.js"></script>
<script type="text/javascript" src="src/py_object.js"></script>
<script type="text/javascript" src="src/py_type.js"></script>
<script type="text/javascript" src="src/py_utils.js"></script>
<script type="text/javascript" src="src/py_builtin_functions.js"></script>
<script type="text/javascript" src="src/py_exceptions.js"></script>
<script type="text/javascript" src="src/py_range_slice.js"></script>
<script type="text/javascript" src="src/py_bytes.js"></script>
<script type="text/javascript" src="src/py_set.js"></script>
<script type="text/javascript" src="src/js_objects.js"></script>
<script type="text/javascript" src="src/stdlib_paths.js"></script>
<script type="text/javascript" src="src/py_import.js"></script>

<script type="text/javascript" src="src/py_string.js"></script>
<script type="text/javascript" src="src/py_int.js"></script>
<script type="text/javascript" src="src/py_long_int.js"></script>
<script type="text/javascript" src="src/py_float.js"></script>
<script type="text/javascript" src="src/py_complex.js"></script>
<script type="text/javascript" src="src/py_dict.js"></script>
<script type="text/javascript" src="src/py_list.js"></script>
<script type="text/javascript" src="src/py_generator.js"></script>
<script type="text/javascript" src="src/py_dom.js"></script>

<script type="text/javascript" src="src/builtin_modules.js"></script>
<script type="text/javascript" src="src/py_import_hooks.js"></script>
<script type="text/javascript" src="src/async.js"></script>
<!-- Javascript code needed to run tests included in dom.py -->
<script src="dom_js_tests.js"></script>

<script type="text/python3" id="tests">
import time
import sys
import traceback
import dis
from javascript import JSObject, console
from browser import document as doc, window, alert, console, prompt
from browser import timer
from browser.local_storage import storage

import editor, brython_test_utils as utils



script_num = -1
failed = []
t_start = None
x=0
_jquery=JSObject(window.jQuery)
def run():
	name="mytable"
	if(_jquery("#" + name).length > 0): 
		_jquery("#" + name).remove();
	global output
	doc["console"].value = ''
	_jquery('#tabs a[href="#tab2"]').tab('show');
	src = editor.editor.getValue()
	if storage is not None:
		storage["py_src"] = src
	try:
		state, t0, t1, _ = utils.run(src);
		if(state==1):
			output = doc["console"].value
			doc['console'].value=''
			sol=_jquery('#sol').val();
			unitTest=_jquery('#unitTest1').val();
			if(len(sol.strip())>0 and len(unitTest.strip())>0 ):
				w=createUnitTest(output);
				doc['console'].value=output
			
	
		print('<completed in %6.2f ms>' % ((t1 - t0) * 1000.0))
	except Exception:
		state=0;	
	
	return state

def fixedTest(runFixedCode,output,retype):
	try:
		state, t0, t1, _ = utils.run(runFixedCode)
	except Exception:
		state=0;
	if(state==1):
		testResult=doc['console'].value.split('===/=ResUltHey==/=')[1];
		testresults=testResult.split("^^^(^^");
		if(retype=="on"):
			range1=3
		else:
			range1=4
		testSize=(len(testresults)-1)/range1
		if(len(testresults)>0):
			count=0;
			result=[]
			for i in range(0, len(testresults)-1, range1):
				if(range1==4):
					if(testresults[i+3]=="True"):
						count=count+1;
				else: 
					if(testresults[i+1]==testresults[i+2]):
						count=count+1;
				result.append(testresults[i+2])
			if(count==testSize):
				percentage=100
			else:
				percentage=count/testSize*100
				state=2;
	else:
		state = 0
	
	return state	
def returnTest(pNumbers,methodname):
	
	add="\n\ttestSize=len(testvalues);"
	add=add+"\n\tfor i in range(0,testSize):\n\t\t"
	add=add+"\n\t\ttry:"
	add=add+"\n\t\t\tvalue1=solution";
	if(pNumbers==1):

		parmeters="(deepcopy(testvalues[i])"
		printPar="print(str(testvalues[i])"
		exceptionprint="print(str(testvalues[i])"
	else:
		parmeters="(deepcopy(testvalues[i][0])"
		printPar="print(str(testvalues[i][0])"
		exceptionprint="print(str(testvalues[i][0])"
		for j in range(1,pNumbers):
			parmeters=parmeters+",testvalues[i]["+str(j)+"]"
			printPar=printPar+"+\", \"+str(testvalues[i]["+str(j)+"])" 
			exceptionprint=printPar;
	parmeters=parmeters+")"
	add=add+parmeters+"\n\t\t\tvalue2="+methodname+parmeters
	add=add +"\n\t\t\tif(type(value1)==type(value2) and str(type(value1))==\"<class 'float'>\"):\n\t\t\t\tmatch=isclose(value1,value2)"
	add=add+"\n\t\t\telif(type(value1)!=type(value2)):\n\t\t\t\tmatch=False"
	add=add+"\n\t\t\telse:\n\t\t\t\tmatch=value1==value2"
	add=add+"\n\t\t\tif(match):\n\t\t\t\tcount=count+1\n\t\t\t"
	printPar=printPar+"+\"^^^(^^\"+str(value1)+\"^^^(^^\"+str(value2)+\"^^^(^^\"+str(match)+\"^^^(^^\")"
	add=add+printPar;
	add=add+"\n\t\texcept Exception:\n\t\t\t"+exceptionprint+"+\"^^^(^^\"+str(value1)+\"^^^(^^\"+str(traceback.format_exc()).split(\'\\n\')[-2]+\"^^^(^^False^^^(^^\")"
	add=add+"\n\tif(count==testSize):\n\t\tprint(\"Passed All Test\")\n\telse:\n\t\tprint( str(count)+\" from \"+str(testSize)+\" Tests Passed \" );\ncheck()"
	return add;

def voidTest(pNumbers,methodname):
	add="\n\ttestSize=len(testvalues);"
	add=add+"\n\tfor i in range(0,testSize):\n\t\t"
	add=add+"\n\t\ttry:\n\t\t\t"
	if(pNumbers==1):
		parmeters="(deepcopy(testvalues[i])"
		printPar="print(str(testvalues[i])"
	else:
		parmeters="(deepcopy(testvalues[i][0])"
		printPar="print(str(testvalues[i][0])"
		for j in range(1,pNumbers):
			parmeters=parmeters+",deepcopy(testvalues[i]["+str(j)+"])"
			printPar=printPar+"+\", \"+str(testvalues[i]["+str(j)+"])"
	add=add+printPar+")\n\t\t\tprint(\"^^^(^^\")";
	add=add+"\n\t\t\t"+methodname;    
	parmeters=parmeters+")"
	add=add+parmeters+"\n\t\t\tprint(\"^^^(^^\")\n\t\t\tsolution"+parmeters+"\n\t\t\tprint(\"^^^(^^\")\n\t\texcept Exception:\n\t\t\tprint(str(traceback.format_exc()).split(\'\\n\')[-2])\n\t\t\tprint(\"^^^(^^\")\n\t\t\tsolution"+parmeters+"\n\t\t\tprint(\"^^^(^^\")\ncheck()"

	return add;
def save():
	_jquery.post(_jquery('#host').val()+"saveproblem",{'pid':_jquery('#pid').val(), 'sol':editor.editor.getValue()});
def getText():
	doc["code"].value=editor.editor.getValue()

def createUnitTest(output):
		runcode="";
		src=editor.editor.getValue()
		sol=_jquery('#sol').val();
		pNumbers=int(_jquery('#pNumbers').val());
		unitTest=_jquery('#unitTest1').val();
		randomClass="class Random:\n\tdef __init__(self, seed):\n\t\tself.seed=seed;\n\t\tself.m=2**32;\n\t\tself.a=1103515245;\n\t\tself.words=\"While drawing in class to avoid listening to a story from his painfully boring teacher at Stagwood School, 12-year old Cal sees a frog staring at him through the window. Odder than that is the fact that this frog happens to be wearing glasses. Cal and his best friend, the tactless but loyal Soy, learn that the frog (who prefers the name Deli) has sought them out for a reason. When a school administrator named Ream reveals himself to be a dragon, the boys discover that fairytales are real, and that there is magic afoot in Stagwood. With Ream on their tail, the trio must unearth a powerful tool protected by riddles and rile (the magic that fuels nightmares) to save the fate of all fairytales past. Their only means on conveyance, Cal's now-flying bed, takes them on a journey beyond the home of the fairies (a cloud floating somewhere over Iceland) to set things right. But, before Cal can defeat Ream and his kidnapped army of fairies, he has to deal with Soy's knack for arguing with magical creatures, discover the truth about Deli's identity, and earn his place as the hero of the story. The Guardians of Lore is a middle grade novel that centers around two life-long friends, infusing humor and fantasy-based riddles into a modern fairytale.\"\n\t\tself.words=self.words.split(\" \")\n\t\tself.c = 12345;\n\tdef randInt(self,lo,hi):\n\t\tseed = (self.a * self.seed + self.c) % self.m;\n\t\trange=hi-lo+1;\n\t\tself.seed+=1;\n\t\treturn int(seed % range + lo);\n\tdef randDouble(self):\n\t\tseed = (self.a * self.seed + self.c) % self.m;\n\t\tself.seed+=1;\n\t\treturn (seed/self.m)\n\tdef randBol(self):\n\t\tif(self.randDouble()>.5):\n\t\t\treturn True;\n\t\telse:\n\t\t\treturn False;\n\tdef randStr(self):\n\t\treturn self.words[self.randInt(0,len(self.words)-1)];"
		
		methodname=_jquery('#methodname').val();
		retype=_jquery('#retype').val();
		runcode= randomClass+"\n"+unitTest+"\n"+src +"\n" +sol +"\n";
		seed=str(time.time()%60);
		add="from copy import deepcopy\nimport traceback\ndef isclose(a, b, rel_tol=1e-01, abs_tol=0.0):\n\treturn abs(a-b) <= .05\ndef check():\n\ttestvalues=unitTest("+seed+");\n\tcount=0;\n\tprint(\"===/=ResUltHey==/=\");\n\t"
		addfixed="from copy import deepcopy\nimport traceback\ndef isclose(a, b, rel_tol=1e-01, abs_tol=0.0):\n\treturn abs(a-b) <= .05\ndef check():\n\ttestvalues=unitTest(200);\n\tcount=0;\n\tprint(\"===/=ResUltHey==/=\");\n\t"
		if(retype=="on"):
			v=voidTest(pNumbers,methodname)
			add=add+v
			addfixed=addfixed+v;
		else:
			returnm=returnTest(pNumbers,methodname)
			add=add+returnm
			addfixed=addfixed+returnm

		runFixedCode=runcode+addfixed
		runcode=runcode+add;
		m=fixedTest(runFixedCode,output,retype)
		if(m==0):
			result=[]
			result.append(str(doc['console'].value))
			if(doc['console'].value.find("NameError: solution")>-1):
				doc['console'].value="run time error in Testing\n"+ "please name the solution method def solution\n"
			elif(str(doc['console'].value).find("===/=ResUltHey==/=")> -1):
				doc['console'].value=str(doc['console'].value).split("===/=ResUltHey==/=")[0]
				doc['console'].value=doc['console'].value+ "\nrun time error in Testing\n"+" You may have infinite loop"
			else:
				doc['console'].value="run time error in Testing\n"+ doc['console'].value[doc['console'].value.index("Traceback (most recent call last)"):]
			showError=1
			_jquery('#tabs a[href="#tab2"]').tab('show');
		else:
			showError=0
			testResult=doc['console'].value.split('===/=ResUltHey==/=')[1];
			testresults=testResult.split("^^^(^^");
			if(len(testresults)>0):

				name="mytable"
				if(_jquery("#" + name).length > 0): 
					_jquery("#" + name).remove();
               
				table = _jquery('<table id =' + name + '></table>').addClass("table-bordered table");
				row = _jquery('<tr></tr>').addClass("badge-warning");
				row.append(_jquery('<th></th>').text("parameters"));
				row.append( _jquery('<th></th>').text("expected"));
				row.append( _jquery('<th></th>').text("Your result"));
				
				row.append(_jquery('<th></th>').text("match"));
				row.append(_jquery('<th></th>').text("comment"));
				table.append(row);
				if (retype !="on"):
					for i in range(0, len(testresults)-1, 4):
						if(testresults[i+3].strip()=='False'):
							row=_jquery('<tr></tr>').addClass("alert-danger");
						else:
							row=_jquery('<tr></tr>').addClass("success");
						for n in range(0, 4):
							if(n==0):
								row.append(_jquery('<td></td>').html(testresults[i+n][1:].replace("\n", "<br />")));
							else:
								row.append(_jquery('<td></td>').html(testresults[i+n].replace("\n", "<br />")));
							if (n==3):
								if(testresults[i+3].strip()=='False'):
									if(len(testresults[i+1])>0 and testresults[i+1][len(testresults[i+1])-1]==("\n") and len(testresults[i+2])>0 and  testresults[i+2][len(testresults[i+2])-1]!=("\n")):
										row.append(_jquery('<td></td>').text( " [expected contains \\n] at the end "));
									elif (len(testresults[i+1])>0 and testresults[i+1][len(testresults[i+1])-1]!=("\n") and len(testresults[i+2])>0 and testresults[i+2][len(testresults[i+2])-1]==("\n")):
										row.append(_jquery('<td></td>').text( " [expected does not contains \\n] at the end "));
									elif (len(testresults[i+1])>0 and testresults[i+1][len(testresults[i+1])-1]==" " and len(testresults[i+2])>0 and testresults[i+2][len(testresults[i+2])-1]!=" "):
										row.append(_jquery('<td></td>').text( " [[expected contains]] \"\" at the end"));
									elif (len(testresults[i+1])>0 and testresults[i+1][len(testresults[i+1])-1]!=" " and len(testresults[i+2])>0 and testresults[i+2][len(testresults[i+2])-1]==" "):
										row.append(_jquery('<td></td>').text( " [[expected does not contains]] \"\" at the end"));
									else:
										row.append(_jquery('<td></td>').text(" not the same"));
								else:
									row.append(_jquery('<td></td>').text(""));
						table.append(row);
					row = _jquery('<tr></tr>').addClass("badge-warning");
					if(m==2 and "Passed All Test".strip()==testresults[len(testresults)-1].strip() ):
						row.append(_jquery('<td colspan="5"></td>').text(testresults[len(testresults)-1] +" in this session but not the secret test"));
					else:
						row.append(_jquery('<td colspan="5"></td>').text(testresults[len(testresults)-1]));
					table.append(row);
				else:
					count=0;
				    
					for i in range(0, len(testresults)-1, 3):
						if(testresults[i+1]!=testresults[i+2]):
							row=_jquery('<tr></tr>').addClass("alert-danger");
							flag=False;
						else:
							row=_jquery('<tr></tr>').addClass("success");
							flag=True
							count=count+1;
						for n in range(0, 3):
							if(n!=1 and n!=2):
								row.append(_jquery('<td></td>').html(testresults[i+n][1:].replace("\n", "<br />")));
							if(n==1):
								row.append(_jquery('<td></td>').html(testresults[i+2][1:].replace("\n", "<br />")));
							if (n==2):
								row.append(_jquery('<td></td>').html(testresults[i+1][1:].replace("\n", "<br />")));
								row.append(_jquery('<td></td>').html(str(flag)));
								if(flag==False):
									if(len(testresults[i+1])>0 and testresults[i+1][len(testresults[i+1])-1]==("\n") and len(testresults[i+2])>0 and  testresults[i+2][len(testresults[i+2])-1]!=("\n")):
										row.append(_jquery('<td></td>').text( " [expected contains \\n] at the end "));
									elif (len(testresults[i+1])>0 and testresults[i+1][len(testresults[i+1])-1]!=("\n") and len(testresults[i+2])>0 and  testresults[i+2][len(testresults[i+2])-1]==("\n")):
										row.append(_jquery('<td></td>').text( " [expected does not contains \\n] at the end "));
									elif (len(testresults[i+1])>0 and testresults[i+1][len(testresults[i+1])-1]==" " and len(testresults[i+2])>0 and testresults[i+2][len(testresults[i+2])-1]!=" "):
										row.append(_jquery('<td></td>').text( " [[expected contains]] \"\" at the end"));
									elif (len(testresults[i+1])>0 and testresults[i+1][len(testresults[i+1])-1]!=" " and len(testresults[i+2])>0 and testresults[i+2][len(testresults[i+2])-1]==" "):
										row.append(_jquery('<td></td>').text( " [[expected does not contains]] \"\" at the end"));
									else:
										row.append(_jquery('<td></td>').text(" not the same"));
								else:
									row.append(_jquery('<td></td>').text(""));
						table.append(row);
					row = _jquery('<tr></tr>').addClass("badge-warning");
					if(count==(len(testresults)-1)/3):
						row.append(_jquery('<td colspan="5"></td>').text("All Test Passed"));
					else: 
						row.append(_jquery('<td colspan="5"></td>').text("Only " + str(count) +" from "+str((len(testresults)-1)/3) +" Passed" ));
					table.append(row); 
				_jquery("#tester").append(table);
				_jquery('#tabs a[href="#tab3"]').tab('show');
                
		return showError
__BRYTHON__.loop_timeout = 2
# bindings
doc['run'].bind('click',lambda ev:run())
doc['pydesc'].innerHTML=_jquery('#desc').val()
editor.editor.setValue(_jquery('#code').val())
timer.set_interval(getText,1);

</script>
<script type="text/javascript">
    
         $(function() {


		// Start file download.
		
        
         	var sst=<%-JSON.stringify(sst)%>;
        var s1=1, s2=3600;
        if (sst!="0"){
        
         s1=Number(sst.split("-")[0])
         s2=Number(sst.split("-")[1])
         var s3=sst.split("-")[2];
         if(s3==0)
         	document.getElementById("v0").checked = true;
         else
         	document.getElementById("v1").checked = true;

     }
     else
     document.getElementById("v2").checked = true;
            $( "#slider-3" ).slider({
               range:true,
               min: 1,
               max: 3600,
               values: [s1, s2],
               slide: function( event, ui ) {
                  $( "#second" ).val(  + ui.values[ 0 ] + " - " + ui.values[ 1 ] );
               }
            });
            $( "#second" ).val(  + $( "#slider-3" ).slider( "values", 0 ) +
               " - " + $( "#slider-3" ).slider( "values", 1 ) );
         });
   
	var nodeCodeCounter ={};
	var hash_code=<%- JSON.stringify(hash_code) %>;
	
	var nodeNames=<%- JSON.stringify(nodesName) %>;
	var hash_names=<%- JSON.stringify(hash_names) %>;
	var users=<%- JSON.stringify(users)%>;
	function download(filename, text) {
		var element = document.createElement('a');
		element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
		element.setAttribute('download', filename);

		element.style.display = 'none';
		document.body.appendChild(element);

		element.click();

		document.body.removeChild(element);
     }
	function blindColor(l,values){
		var blindRGB=[[0,0,0],[0,73,73],[0,146,146],[255,109,182],[255,182,119],[73,0,146],[182,109,255],[109,182,255],[182,219,255],[146,0,0],[146,73,0],[36,255,36],[255,255,109]]
		var k;
		if(values.length>=blindRGB.length){
			
			if(l==values.length)
				k=blindRGB[blindRGB.length-1];
			else if(l<blindRGB.length)
				k=blindRGB[l];
			else 
				k=blindRGB[blindRGB.length-2];

         
		}

		else
		{     k= blindRGB[l];
			
		}

       return convertRGB(k[0],k[1],k[2])
	}
	function showanotherversion(){
		var id=document.getElementById("pid").value;
		var nodeName=document.getElementById("hashtest").value;
		if(nodeName=="0" || nodeName=="1" || nodeName=="")
			alert("this selection dose not have other version");
		else{
			var arr = Object.keys(hash_code[nodeName]).map(function (key) {return hash_code[nodeName][key]});
			var studentemails=Object.keys(hash_names[nodeName]).map(function (key) {return hash_names[nodeName][key]});

			var part=nodeNames[nodeName].split("_");
			var attempts=arr[0].length;
			var counter=nodeCodeCounter[nodeName]+1;
			nodeCodeCounter[nodeName]+=1;
			if (counter>=attempts){
				counter=0;
				nodeCodeCounter[nodeName]=0
			}
			document.getElementById('codeversion').innerHTML=(counter+1) +"/"+ attempts;
			if(document.getElementById("show").value=="true")
				document.getElementById('codeWriter').innerHTML=users[studentemails[0][counter]]
			document.getElementById("code2").value=arr[0][counter];
			var editor = ace.edit("editor")
			editor.setValue(arr[0][counter], 0);
		}


	}
	function sortFloat(a,b) { return a - b; }
    function findwidth(spt,nodeRadious,cstudent,nodeName){
    	if(spt=="0")
    		return 1;

    	else 
    		if(nodeName in cstudent==false)
    			return nodeRadious;
    		else
    			return nodeRadious-Math.sqrt(cstudent[nodeName]);

    }
	$(window).load(function () 
	{   
		//var slider = document.getElementById("myRange");
		//var output = document.getElementById("demo");
		//output.innerHTML = slider.value; // Display the default slider value

	// Update the current slider value (each time you drag the slider handle)
		//slider.oninput = function() {
			//output.innerHTML = this.value;
		//}

		var nodes = new vis.DataSet();
		var edges = new vis.DataSet();
		var nodeNames=<%- JSON.stringify(nodesName) %>;
		var errors=<%-JSON.stringify(errors)%>;
		var scolor=<%-JSON.stringify(scolor)%>;
		var cob=<%-JSON.stringify(cob)%>;

		var show=<%-JSON.stringify(show)%>;
		var spt=<%-JSON.stringify(spt)%>;
		var text="digraph finite_state_machine {\nrankdir=LR;\n size=\"10,7\"\nnode [shape=circle];\n"
		var cstudent=<%-JSON.stringify(cstudent)%>;
		var hash_code=<%-JSON.stringify(hash_code)%>;
		var hash_names=<%-JSON.stringify(hash_names)%>;
		var users=<%-JSON.stringify(users)%>;
		var percent=<%-JSON.stringify(percent)%>;
		var counthash=<%-JSON.stringify(counthash)%>;
		var fromCount=<%-JSON.stringify(fromCount)%>;
		var self_node=<%-JSON.stringify(self_node)%>;
		var minR=parseInt(<%-JSON.stringify(minR)%>);
		var nodeRadious;
		var n_r={};
		var l=0;
		var totalNode={};
		if (errors=="All")
		document.getElementById("syntax").checked = true;
        if (show=="true")
        document.getElementById("showname").checked = true;
        if(scolor=="true")
        	document.getElementById("sizeColor").checked = true;
        if(cob=="true")
        	document.getElementById("cob").checked = true;
       if (spt!="0"){
        //document.getElementById("spt").checked = true;
        //slider.value= Number(spt)
        //output.innerHTML=Number(spt)
        }
        var values=[]
        for ( var key in <%-JSON.stringify(alises)%>){
        	values.push(percent[key])
        }
        values = Array.from(new Set(values))
        values.sort(function(a,b) { return a - b;})
        
		var result=<%-JSON.stringify(result)%>;
		for ( var key in <%-JSON.stringify(alises)%>){
			var colr;
			colr=convertRGB2(1-(percent[key]/100),(percent[key]/100),0);
            
			if (key in self_node)
				nodeRadious=Math.sqrt(counthash[key]-result[self_node[key]]);
			else
				nodeRadious=Math.sqrt(counthash[key]);
			l=l+1;
             if(cob=="true"){
			  colr=blindColor(values.indexOf(percent[key])+1,values);
			 
			}
            
			n_r[key]=nodeRadious;
			if(nodeNames[key]!=undefined){
			if (document.getElementById('sizeColor').checked==false)
            text+="\""+key.replace(/\s/g,'')+"\""+"[label="+"\""+nodeNames[key].split("_")[0]+"\""+",color=\""+colr+"\",style=\"filled\",fontcolor=white,width="+nodeRadious+", fontsize=50]\n"
            else
            	text+="\""+key.replace(/\s/g,'')+"\""+"[label="+"\""+nodeNames[key].split("_")[0]+"\""+",color=\"blue\",style=\"filled\",fontcolor=white,width=5, fontsize=50]\n"
			nodes.add( {id: key ,level:l, label:nodeNames[key],value:nodeRadious,title:nodeNames[key],fontStrokeWidth : 4,fontStrokeColor : 'white',shape: 'dot',borderWidth:1,color: {
			border: 'black',
			
			background:colr ,
			highlight: {
			border: colr,
			background: 'gold'
			}}});
			
		}
		}
		l=l+1;
		n_r["0"]=Math.sqrt(<%-JSON.stringify(start_no)%>);
		var s_g="black"
		
		var s_c="red";
		if (document.getElementById('sizeColor').checked==false)
		 {

		  if (cob=="true")
		  { s_c=s_g;

		  	text+="\"0\"[label="+"\"S\",color=\""+s_g+"\",style=\"filled\",fontcolor=white,width="+Math.sqrt(parseInt(<%-JSON.stringify(start_no)%>))+", fontsize=50]\n"}
		 else

		text+="\"0\"[label="+"\"S\",color=\"red\",style=\"filled\",fontcolor=white,width="+Math.sqrt(parseInt(<%-JSON.stringify(start_no)%>))+", fontsize=50]\n"}
	    else
	    	text+="\"0\"[label="+"\"S\",color=\"blue\",style=\"filled\",fontcolor=white,width=5, fontsize=50]\n"
        
		nodes.add({id:"0",label:"Start_"+ <%-JSON.stringify(start_no)%>,title:"Start_"+<%-JSON.stringify(start_no)%>,value:Math.sqrt(parseInt(<%-JSON.stringify(start_no)%>)),level:l,fontStrokeWidth : 4,fontStrokeColor : 'white',shape: 'dot',color: {
		border: 'black',
		background:s_c,highlight: {
			border: s_c,
			background: 'gold'}}});
		
		l=l+1;
		n_r["1"]=Math.sqrt(<%-JSON.stringify(gaveup_no)%>);
		var g_c="gray"
		if (document.getElementById('sizeColor').checked==false){
			if(cob=="true"){
				g_c=s_g;
				text+="\"1\"[label=\"G\",color=\""+g_c+"\",style=\"filled\",fontcolor=white,width="+Math.sqrt(parseInt(<%-JSON.stringify(gaveup_no)%>))+", fontsize=50]\n"}
		else
		text+="\"1\"[label=\"G\",color=\"gray\",style=\"filled\",fontcolor=white,width="+Math.sqrt(parseInt(<%-JSON.stringify(gaveup_no)%>))+", fontsize=50]\n"
        }
	    else
	    	text+="\"1\"[label=\"G\",color=\"blue\",style=\"filled\",fontcolor=white,width=5, fontsize=50]\n"
		nodes.add({id:"1",level:l,label:"Gaveup_"+<%-JSON.stringify(gaveup_no)%>,title:"Gaveup_"+<%-JSON.stringify(gaveup_no)%>,value:Math.sqrt(parseInt(<%-JSON.stringify(gaveup_no)%>)),fontStrokeWidth : 4,fontStrokeColor : 'white',shape: 'dot',color: {
		border: 'black',
		background:g_c,highlight: {
			border: g_c,
			background: 'gold'} }});
		
		var edgeno;
		var c=0;
		var w=1;
		var type="diagonalCross";
		var find=[];
		var edgesin=[];
		var addege=true;
		
		document.getElementById("num").value=l;
		var edge= parseInt(<%-JSON.stringify(edge)%>);
		
		for ( var key in result )
		{
			var from1=key.split("->")[0].trim();
			var to1=key.split("->")[1].trim();
			 
				edgeno=result[key];
				addedge=true;
				
			

			
			if(addedge)
			{
				
				
                
				
				c=c+1;
				var percentage;
				
				var from2=key.split("->")[0];

				if(from2 in self_node && from1!=to1)
                percentage = Math.round((edgeno/(counthash[from2]-result[self_node[from2]]))*100)
                else
                percentage =Math.round((edgeno/counthash[from2])*100)
                if(from1=="0"){
                	percentage=Math.round((edgeno/<%-JSON.stringify(start_no)%>)*100)
                }

                w=(edgeno/<%-JSON.stringify(start_no)%>)*50;
                
                if(percentage>=edge || from1=="0" || to1=="1"){
				edges.add({id: c+"", from: from1, to: to1, width:(w/5),
				style: 'arrow',title:String(edgeno)+"("+String(percentage)+"%)",
				color: 'blue',label:String(edgeno)+"("+String(percentage)+"%)",labelAlignment:'line-center',fontStrokeWidth : 2,fontStrokeColor : '#00ff00',smoothCurves:{type:type, roundness:1}});
				if (document.getElementById('sizeColor').checked==false)
				text+="\""+from1.replace(/\s/g,'')+"\""+" -> "+"\""+to1.replace(/\s/g,'')+"\""+"[label="+"\""+String(edgeno)+"\",penwidth=\""+edgeno+"\", color=\"blue\" ,fontsize=50,arrowsize=2]\n"
			    else
			    	text+="\""+from1.replace(/\s/g,'')+"\""+" -> "+"\""+to1.replace(/\s/g,'')+"\""+"[label="+"\""+String(edgeno)+"\",penwidth=2, color=\"blue\" ,fontsize=50,arrowsize=2]\n"
			    }
		}
         
		}
		text+="}"
		// create a network
		var container = $('#network').get(0);
		var data = {
		nodes: nodes,
		edges: edges
		};

		var editor = ace.edit("editor") 
		editor.getSession().setTabSize(2)
		editor.setTheme("ace/theme/textmate")
		editor.getSession().setMode("ace/mode/java")
		editor.setFontSize(12);
		var select = document.getElementById("choosesection");
		var options = ["All", "S1", "S2"];
		for(var i = 0; i < options.length; i++) 
		{
			var opt = options[i];
			var el = document.createElement("option");
			el.textContent = opt;
			el.value = opt;
			select.appendChild(el);
		}
		select.value="<%-section%>"
		document.getElementById("k").value="<%-k%>";
		document.getElementById("edge").value="<%- edge %>";

		document.getElementById("minR").value="<%-minR%>";
		var options = {nodes:{ scaling: {
           min:minR,max:150}},stabilize: true,physics:{barnesHut: {enabled: false}, repulsion: {nodeDistance: 300, springLength: 150}}, smoothCurves: true};
		network = new vis.Network(container, data, options);
		
		network.on("select",function(params) {

		editor.setValue("", 0);
		document.getElementById("hashtest").value=params.nodes
		if (params.nodes !="0" && params.nodes !="1" && nodeNames[params.nodes]!=undefined ){
			var info=nodeNames[params.nodes].split("_");
			var val;
			document.getElementById('selection').innerHTML = 'Selection: ' + info[0]+"<br/> attempts#: " + info[1]+"<br/> correctness percentage= " +info[2]+"<br/> unique user#= " +info[3];
			var arr = Object.keys(hash_code[params.nodes]).map(function (key) {return hash_code[params.nodes][key]});
			var email=Object.keys(hash_names[params.nodes]).map(function (key) {return hash_names[params.nodes][key]});
			editor.setValue(arr[0][0], 0);
			document.getElementById("code2").value=arr[0][0];
			if(document.getElementById("show").value=="true")
			 document.getElementById('codeWriter').innerHTML=users[email[0][0]]

			nodeCodeCounter[params.nodes]=0;
		}else{
			if( JSON.stringify(params.nodes)=="[\"0\"]"){
			document.getElementById('selection').innerHTML = 'Selection: start <br/> attempts#: ' + <%-JSON.stringify(start_no)%>;
			editor.setValue(<%-JSON.stringify(scafolding)%>, 0);}
			else{
			document.getElementById('selection').innerHTML = 'Selection: gaveup <br/> attempts#: ' +<%-JSON.stringify(gaveup_no)%>
			editor.setValue("", 0);
			}
		}
        
		});
      document.getElementById("dwn-btn").addEventListener("click", function(){
		// Generate download of hello.txt file with some content
		
		var filename = "graph.dot";

		download(filename, text);
		}, false);
	});
</script>

</head>

<body onload="brython({debug:1, cache:'none', static_stdlib_import:true})">
<nav class=" navbar navbar-inverse navbar-fixed-top" data-options="region:'north'">
		<div class="container">
				<div class="navbar-header">
					<a class="navbar-brand" href='/profile'>Spinoza</a>
				</div>
				<ul class="nav navbar-nav">
					<li ><a href="/pythonide">Python IDE</a></li>
					<li ><a href="/classes/problems/<%=classId%>/<%=problem1.problemsetId%>">Back to problem set </a></li>
					<li ><a href="/classes/problems/<%=classId%>">View problem sets</a></li>  
				</ul>
			</div>
		</nav>

<div style="text-align:center">
<br>
</div>
</center>


    
<div id="container">
<h2 class="Spinoza">Markov Model for <%=pname%> </h2>
    <label> Color blindness</label>
	<input type="checkbox" id="cob">
    <label>Number of nodes in this SMM</label>
    <input name="num" type="text"  id="num" style="margin-left:5px" readonly/>
	<label>Section</label>
	<select id="choosesection" style="margin-left:5px">
	  <option>choose a section</option>
	</select>
	<label style="margin-left:5px">k</label>

	<input name="k" type="number" min="0" value="" id="k" style="margin-left:5px"/>
	<label style="margin-left:5px">E%</label>
	<input name="edge" type="number" min="0" value="" id="edge" style="margin-left:5px"/>
	<label style="margin-left:5px">Min Node Size</label>
	<input name="minR" type="number" value="" min="1" id="minR" style="margin-left:5px"/>
	<input id="hashtest" type="hidden"/>
	<input id="pid" type="hidden" value="<%=id1%>"/>
	<input id="code2" type="hidden"/>
	<input id="errors" type="hidden" value="<%= errors%>"/>
	<input id="sol" type="hidden" value="<%= sol%>"/>
	<input id="host" type="hidden" value="<%= host%>"/>
	<input id="unitTest1" type="hidden" value="<%= test%>"/>
	<input id="methodname" type="hidden" value="<%= methodname%>"/>
	<input id="retype" type="hidden" value="<%= retype%>"/>
	<input id="pNumbers" type="hidden" value="<%= pNumbers%>"/>
	<input id="classId" type="hidden" value="<%= classId%>"/>
	<label> Include Syntax errors</label>
	<input type="checkbox" id="syntax">
	<label> Show student name</label>
	<input type="checkbox" id="showname">
	
	
      
	  <label> Time Zooming PSMM  </label>
		<input type="radio" name="sst2" value="0" id="v0">with context</input>
		<input type="radio" name="sst2" value="1" id="v1">without context</input>
        <input type="radio" name="sst2" value="2"id="v2" >none</input>
      <p>
         <label for = "second">Second range:</label>
         <input type = "text" id = "second" 
            style = "border:0; color:#b9cd6d; font-weight:bold;">
      </p>

      <div id = "slider-3"></div>
      </br>
	<button onClick="viewgraph()" style="margin-left:5px" class="btn btn-primary btn-sm">Refresh Graph</button>
	<label> only for Download Graph, make size and color same</label>
	<input type="checkbox" id="sizeColor">
	<input type="button" id="dwn-btn" value="Download graph"/>
  <p id="selection"></p>
<div id="right-div">
  <button id="run"class="btn btn-primary ">run</button>

  <div id="editor" style="width:70% ;height:95%;"></div>
  <button onClick="showanotherversion()" style="margin-left:5px;margin-top:5px" class="btn btn-primary btn-sm">Show another version</button>
  <button onClick="makebuggyProblem()" style="margin-top:5px" class="btn btn-primary btn-sm">Post buggy problem</button>
	<p id="codeWriter"></p>
	<p id="codeversion"></p>

</div>
<div id="left-div">
	


<div class="tabbable"style="width:100%;height:95%;" id="tabs"> <!-- Only required for left/right tabs -->
  <ul class="nav nav-tabs">
	 <li class="active"><a href="#network" data-toggle="tab">Markov Model</a></li>
	 <li><a href="#tab1" data-toggle="tab">Description</a></li>
	 <li><a href="#tab2" data-toggle="tab">Output</a></li>
	 <li><a href="#tab3" data-toggle="tab">Unit Test</a></li>
  </ul>
  <div class="tab-content" style="width:100%;height:95%;">
	<div class="tab-pane active" id="network" style="width:100%;height:95%;"></div>
	<div class="tab-pane" id="tab1" style="width:100%;height:95%;">
	<div id="pydesc" style="border:thin solid #000000;padding-left:5px;background:#FFFFE0;width:95%;height:95%; font-family: Verdana, Geneva, sans-serif;
				font-size:16px" readonly> </div>
	</div>
	<div class="tab-pane " id="tab2"style="width:100%;height:95%;" >
	 <textarea id="console" autocomplete="off" style="font-family:monospace;"></textarea>
	</div>
	<div class="tab-pane" id="tab3">
	 <div id='tester'style="background:white;"></div>
	</div>
  </div>
</div>
</div>

<input type="hidden" value= "<%= sol%>"id="code">
<input type="hidden" value= "<%= problem1.test_generator%>"id="unitTest1">
<input type="hidden" value= "<%= problem1.sol%>"id="sol">
<input type="hidden" value= "<%= problem1.pNumbers%>"id="pNumbers">
<input type="hidden" value= "<%= problem1.methodname%>"id="methodname">
<input type="hidden" value= "<%= problem1.retype%>"id="retype">
<input type="hidden" value= "<%= problem1._id%>"id="pid">
<input type="hidden" value= "<%= host%>"id="host">
<input type="hidden" value= "<%= problem1.Description %>"id="desc">
<input type="hidden" value= "<%= show %>"id="show">
</div>

</body>
</html>

