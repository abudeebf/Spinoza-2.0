var option_parser_1 = require('./option_parser');
var JVM = require('./jvm');
var util = require('./util');
var logging = require('./logging');
var parser = new option_parser_1.OptionParser({
    default: {
        classpath: {
            type: 3 /* NORMAL_VALUE_SYNTAX */,
            alias: 'cp',
            optDesc: ' <class search path of directories and zip/jar files>',
            desc: 'A : separated list of directories, JAR archives, and ZIP archives to search for class files.'
        },
        D: {
            type: 4 /* MAP_SYNTAX */,
            optDesc: '<name>=<value>',
            desc: 'set a system property'
        },
        jar: {
            type: 3 /* NORMAL_VALUE_SYNTAX */,
            stopParsing: true
        },
        help: { alias: '?', desc: 'print this help message' },
        X: { desc: 'print help on non-standard options' },
        enableassertions: {
            type: 2 /* COLON_VALUE_OR_FLAG_SYNTAX */,
            optDesc: '[:<packagename>...|:<classname>]',
            alias: 'ea',
            desc: 'enable assertions with specified granularity'
        },
        disableassertions: {
            type: 2 /* COLON_VALUE_OR_FLAG_SYNTAX */,
            optDesc: '[:<packagename>...|:<classname>]',
            alias: 'da',
            desc: 'disable assertions with specified granularity'
        },
        enablesystemassertions: { alias: 'esa', desc: 'enable system assertions' },
        disablesystemassertions: { alias: 'dsa', desc: 'disable system assertions ' }
    },
    X: {
        log: {
            desc: 'log level, [0-10]|vtrace|trace|debug|error',
            type: 3 /* NORMAL_VALUE_SYNTAX */
        },
        'vtrace-methods': {
            type: 3 /* NORMAL_VALUE_SYNTAX */,
            optDesc: ' <java/lang/Object/getHashCode()I:...>',
            desc: 'specify particular methods to vtrace separated by colons'
        },
        'list-class-cache': {
            desc: 'list all of the bootstrap loaded classes after execution'
        },
        'dump-compiled-code': {
            type: 3 /* NORMAL_VALUE_SYNTAX */,
            optDesc: ' <directory>',
            desc: 'location to dump compiled object definitions'
        },
        // TODO: Use -Djava.library.path
        'native-classpath': {
            type: 3 /* NORMAL_VALUE_SYNTAX */,
            optDesc: ' <class search path of directories>',
            desc: 'A : separated list of directories to search for native mathods in JS files.'
        },
        'bootclasspath/a': {
            type: 1 /* COLON_VALUE_SYNTAX */,
            optDesc: ':<directories and zip/jar files separated by :>',
            desc: 'append to end of bootstrap class path'
        },
        'bootclasspath/p': {
            type: 1 /* COLON_VALUE_SYNTAX */,
            optDesc: ':<directories and zip/jar files separated by :>',
            desc: 'prepend in front of bootstrap class path'
        },
        'bootclasspath': {
            type: 1 /* COLON_VALUE_SYNTAX */,
            optDesc: ':<directories and zip/jar files separated by :>',
            desc: 'set search path for bootstrap classes and resources'
        }
    }
});
/**
 * Consumes a `java` command line string. Constructs a JVM, launches the command, and
 * returns the JVM object. Throws an exception if parsing fails.
 *
 * Returns `null` if no JVM needed to be constructed (e.g. -h flag).
 *
 * @param args Arguments to the 'java' command.
 * @param opts Default options.
 * @param doneCb Called when JVM execution finishes. Passes a
 *   number to the callback indicating the exit value.
 * @param [jvmStarted] Called with the JVM object once we have invoked it.
 */
function java(args, opts, doneCb, jvmStarted) {
    if (jvmStarted === void 0) { jvmStarted = function (jvm) { }; }
    var parsedArgs = parser.parse(args), standard = parsedArgs['default'], nonStandard = parsedArgs['X'], jvmState;
    // System properties.
    opts.properties = standard.mapOption('D');
    if (standard.flag('help', false)) {
        return printHelp(opts.launcherName, parser.help('default'), doneCb, 0);
    }
    else if (standard.flag('X', false)) {
        return printNonStandardHelp(opts.launcherName, parser.help('X'), doneCb, 0);
    }
    // GLOBAL CONFIGURATION
    var logOption = nonStandard.stringOption('log', 'ERROR');
    if (/^[0-9]+$/.test(logOption)) {
        logging.log_level = parseInt(logOption, 10);
    }
    else {
        var level = logging[logOption.toUpperCase()];
        if (level == null) {
            process.stderr.write("Unrecognized log level: " + logOption + ".");
            return printHelp(opts.launcherName, parser.help('default'), doneCb, 1);
        }
        logging.log_level = level;
    }
    if (nonStandard.flag('list-class-cache', false)) {
        // Redefine done_cb so we print the loaded class files on JVM exit.
        doneCb = (function (old_done_cb) {
            return function (result) {
                var fpaths = jvmState.getBootstrapClassLoader().getLoadedClassFiles();
                process.stdout.write(fpaths.join('\n') + '\n');
                old_done_cb(result);
            };
        })(doneCb);
    }
    if (standard.flag('enablesystemassertions', false)) {
        opts.enableSystemAssertions = true;
    }
    if (standard.flag('disablesystemassertions', false)) {
        opts.enableSystemAssertions = false;
    }
    if (standard.flag('enableassertions', false)) {
        opts.enableAssertions = true;
    }
    else if (standard.stringOption('enableassertions', null)) {
        opts.enableAssertions = standard.stringOption('enableassertions', null).split(':');
    }
    if (standard.stringOption('disableassertions', null)) {
        opts.disableAssertions = standard.stringOption('disableassertions', null).split(':');
    }
    // NOTE: Boolean form of -disableassertions is a NOP.
    // Bootstrap classpath items.
    var bscl = nonStandard.stringOption('bootclasspath', null);
    if (bscl !== null) {
        opts.bootstrapClasspath = bscl.split(':');
    }
    var bsClAppend = nonStandard.stringOption('bootclasspath/a', null);
    if (bsClAppend) {
        opts.bootstrapClasspath = opts.bootstrapClasspath.concat(bsClAppend.split(':'));
    }
    var bsClPrepend = nonStandard.stringOption('bootclasspath/p', null);
    if (bsClPrepend) {
        opts.bootstrapClasspath = bsClPrepend.split(':').concat(opts.bootstrapClasspath);
    }
    // User-supplied classpath items.
    if (!opts.classpath) {
        opts.classpath = [];
    }
    if (standard.stringOption('jar', null)) {
        opts.classpath.push(standard.stringOption('jar', null));
    }
    else if (standard.stringOption('classpath', null)) {
        opts.classpath = opts.classpath.concat(standard.stringOption('classpath', null).split(':'));
    }
    else {
        // DEFAULT: If no user-supplied classpath, add the current directory to
        // the class path.
        opts.classpath.push(process.cwd());
    }
    // User-supplied native classpath.
    var nativeClasspath = standard.stringOption('native-classpath', null);
    if (nativeClasspath) {
        opts.nativeClasspath = opts.nativeClasspath.concat(nativeClasspath.split(':'));
    }
    // Construct the JVM.
    jvmState = new JVM(opts, function (err) {
        if (err) {
            process.stderr.write("Error constructing JVM:\n");
            process.stderr.write(err.toString() + "\n");
            doneCb(1);
        }
        else {
            launchJvm(standard, opts, jvmState, doneCb, jvmStarted);
        }
    });
    var vtraceMethods = nonStandard.stringOption('vtrace-methods', null);
    if (vtraceMethods) {
        vtraceMethods.split(':').forEach(function (m) { return jvmState.vtraceMethod(m); });
    }
    var dumpCompiledCode = nonStandard.stringOption('dumpCompiledCode', null);
    if (dumpCompiledCode) {
        jvmState.dumpCompiledCode(dumpCompiledCode);
    }
}
/**
 * Consumes a fully-configured JVM, parsed arguments, and a callback.
 * Figures out from this how to launch the JVM (e.g. using a JAR file or a
 * particular class).
 */
function launchJvm(standardOptions, opts, jvmState, doneCb, jvmStarted) {
    var mainArgs = standardOptions.unparsedArgs();
    if (standardOptions.stringOption('jar', null)) {
        jvmState.runJar(mainArgs, doneCb);
        jvmStarted(jvmState);
    }
    else if (mainArgs.length > 0) {
        var cname = mainArgs[0];
        if (cname.slice(-6) === '.class') {
            cname = cname.slice(0, -6);
        }
        if (cname.indexOf('.') !== -1) {
            // hack: convert java.foo.Bar to java/foo/Bar
            cname = util.descriptor2typestr(util.int_classname(cname));
        }
        jvmState.runClass(cname, mainArgs.slice(1), doneCb);
        jvmStarted(jvmState);
    }
    else {
        // No class specified, no jar specified!
        printHelp(opts.launcherName, parser.help('default'), doneCb, 0);
    }
}
function printHelp(launcherName, str, doneCb, rv) {
    process.stdout.write("Usage: " + launcherName + " [-options] class [args...]\n        (to execute a class)\nor  " + launcherName + " [-options] -jar jarfile [args...]\n        (to execute a jar file)\nwhere options include:\n" + str);
    doneCb(rv);
}
function printNonStandardHelp(launcherName, str, doneCb, rv) {
    process.stdout.write(str + "\n\nThe -X options are non-standard and subject to change without notice.\n");
    doneCb(rv);
}
module.exports = java;
//# sourceMappingURL=data:application/json;base64,